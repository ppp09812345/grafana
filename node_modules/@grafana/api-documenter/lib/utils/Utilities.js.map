{"version":3,"file":"Utilities.js","sourceRoot":"","sources":["../../src/utils/Utilities.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,wEAIwC;AAExC,MAAa,SAAS;IAGb,MAAM,CAAC,aAAa,CAAC,IAAY;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;IAC7D,CAAC;IAEM,MAAM,CAAC,0BAA0B,CAAC,OAAgB;QACvD,IAAI,WAAW,GAAW,OAAO,CAAC,WAAW,CAAC;QAE9C,IAAI,OAAO,CAAC,IAAI,kDAAmC,IAAI,OAAO,CAAC,IAAI,oCAA4B,EAAE;YAC/F,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;SAC1E;QAED,IAAI,2CAAqB,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YAChD,OAAO,WAAW,GAAG,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;SACjF;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,IAAY;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAClG,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,mBAAmB,CAAC,OAAgB;QAChD,IAAI,2CAAqB,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YAChD,OAAO,OAAO,CAAC,WAAW,GAAG,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;SACzF;QACD,OAAO,OAAO,CAAC,WAAW,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,sBAAsB,CAAC,IAAY;QAC/C,8CAA8C;QAC9C,iFAAiF;QACjF,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;IAC5E,CAAC;;AAxCuB,iCAAuB,GAAW,kBAAkB,CAAC;AAD/E,8BA0CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  ApiParameterListMixin,\r\n  ApiItem,\r\n  ApiItemKind\r\n} from '@microsoft/api-extractor-model';\r\n\r\nexport class Utilities {\r\n  private static readonly _badFilenameCharsRegExp: RegExp = /[^a-z0-9_\\-\\.]/ig;\r\n  \r\n  public static getImportName(name: string): string {\r\n    return name.replace(Utilities._badFilenameCharsRegExp, '');\r\n  }\r\n\r\n  public static getGrafanaConciseSignature(apiItem: ApiItem): string {\r\n    let displayName: string = apiItem.displayName;\r\n\r\n    if (apiItem.kind === ApiItemKind.ConstructSignature || apiItem.kind === ApiItemKind.Constructor) {\r\n      displayName = displayName.replace(Utilities._badFilenameCharsRegExp, '');\r\n    }\r\n\r\n    if (ApiParameterListMixin.isBaseClassOf(apiItem)) {\r\n      return displayName + '(' + apiItem.parameters.map(x => x.name).join(', ') + ')';\r\n    }\r\n    return displayName;\r\n  }\r\n\r\n  public static getHeaderLinkForName(name: string): string {\r\n    return name.replace('(','-').replace(Utilities._badFilenameCharsRegExp, '').toLocaleLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Generates a concise signature for a function.  Example: \"getArea(width, height)\"\r\n   */\r\n  public static getConciseSignature(apiItem: ApiItem): string {\r\n    if (ApiParameterListMixin.isBaseClassOf(apiItem)) {\r\n      return apiItem.displayName + '(' + apiItem.parameters.map(x => x.name).join(', ') + ')';\r\n    }\r\n    return apiItem.displayName;\r\n  }\r\n\r\n  /**\r\n   * Converts bad filename characters to underscores.\r\n   */\r\n  public static getSafeFilenameForName(name: string): string {\r\n    // TODO: This can introduce naming collisions.\r\n    // We will fix that as part of https://github.com/microsoft/rushstack/issues/1308\r\n    return name.replace(Utilities._badFilenameCharsRegExp, '_').toLowerCase();\r\n  }\r\n}\r\n"]}