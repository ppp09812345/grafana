import { useCallback } from 'react';
import useGetSet from './useGetSet';
export default function useCounter(initialValue, max, min) {
    if (initialValue === void 0) { initialValue = 0; }
    if (max === void 0) { max = null; }
    if (min === void 0) { min = null; }
    typeof initialValue !== 'number' && console.error('initialValue has to be a number, got ' + typeof initialValue);
    if (typeof min === 'number') {
        initialValue = Math.max(initialValue, min);
    }
    else if (min !== null) {
        console.error('min has to be a number, got ' + typeof min);
    }
    if (typeof max === 'number') {
        initialValue = Math.min(initialValue, max);
    }
    else if (max !== null) {
        console.error('max has to be a number, got ' + typeof max);
    }
    var _a = useGetSet(initialValue), get = _a[0], setInternal = _a[1];
    function set(value) {
        var current = get();
        if (current === value) {
            return;
        }
        if (typeof min === 'number') {
            value = Math.max(value, min);
        }
        if (typeof max === 'number') {
            value = Math.min(value, max);
        }
        current !== value && setInternal(value);
    }
    var inc = useCallback(function (delta) {
        if (delta === void 0) { delta = 1; }
        typeof delta !== 'number' && console.error('delta has to be a number, got ' + typeof delta);
        set(get() + delta);
    }, [max, min]);
    var dec = useCallback(function (delta) {
        if (delta === void 0) { delta = 1; }
        typeof delta !== 'number' && console.error('delta has to be a number, got ' + typeof delta);
        set(get() - delta);
    }, [max, min]);
    var reset = useCallback(function (value) {
        if (value === void 0) { value = initialValue; }
        typeof value !== 'number' && console.error('value has to be a number, got ' + typeof value);
        initialValue = value;
        set(value);
    }, [max, min]);
    var actions = {
        inc: inc,
        dec: dec,
        get: get,
        set: set,
        reset: reset,
    };
    return [get(), actions];
}
