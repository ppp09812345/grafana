"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var snapshot_plugin_1 = require("./plugin/snapshot-plugin");
var Detector = (function () {
    function Detector(spy) {
        this.detectorRecords_ = new Map();
        this.snapshotPlugin_ = spy.find(snapshot_plugin_1.SnapshotPlugin);
        this.spy_ = spy;
    }
    Detector.prototype.detect = function (id) {
        var _a = this, detectorRecords_ = _a.detectorRecords_, snapshotPlugin_ = _a.snapshotPlugin_, spy_ = _a.spy_;
        if (!snapshotPlugin_) {
            spy_.warnOnce(console, "Snapshotting is not enabled.");
            return undefined;
        }
        var detectorRecord = detectorRecords_.get(id);
        var snapshotRecord = this.record_(snapshotPlugin_.snapshotAll());
        if (detectorRecord) {
            detectorRecord.snapshotRecords.push(snapshotRecord);
        }
        else {
            detectorRecord = {
                snapshotRecords: [snapshotRecord]
            };
            detectorRecords_.set(id, detectorRecord);
        }
        if (detectorRecord.snapshotRecords.length > 2) {
            detectorRecord.snapshotRecords.shift();
        }
        if (detectorRecord.snapshotRecords.length < 2) {
            return undefined;
        }
        var _b = detectorRecord.snapshotRecords, previous = _b[0], current = _b[1];
        return this.compare_(id, previous, current);
    };
    Detector.prototype.compare_ = function (id, previous, current) {
        var subscriptions = [];
        var unsubscriptions = [];
        var flatteningSubscriptions = [];
        var flatteningUnsubscriptions = [];
        var previousSubscriptions = previous.rootSubscriptions;
        var currentSubscriptions = current.rootSubscriptions;
        previousSubscriptions.forEach(function (previous, key) {
            if (!currentSubscriptions.has(key)) {
                unsubscriptions.push(previous);
            }
        });
        currentSubscriptions.forEach(function (current, key) {
            var previous = previousSubscriptions.get(key);
            if (previous) {
                var previousFlattenings_1 = previous.flattenings;
                var currentFlattenings_1 = current.flattenings;
                previousFlattenings_1.forEach(function (flattening, key) {
                    if (!currentFlattenings_1.has(key)) {
                        flatteningUnsubscriptions.push(flattening);
                    }
                });
                currentFlattenings_1.forEach(function (flattening, key) {
                    if (!previousFlattenings_1.has(key)) {
                        flatteningSubscriptions.push(flattening);
                    }
                });
            }
            else {
                subscriptions.push(current);
            }
        });
        if (flatteningSubscriptions.length === 0 &&
            flatteningUnsubscriptions.length === 0 &&
            subscriptions.length === 0 &&
            unsubscriptions.length === 0) {
            return undefined;
        }
        return {
            flatteningSubscriptions: flatteningSubscriptions,
            flatteningUnsubscriptions: flatteningUnsubscriptions,
            subscriptions: subscriptions.map(function (s) { return s.subscriptionSnapshot; }),
            unsubscriptions: unsubscriptions.map(function (s) { return s.subscriptionSnapshot; })
        };
    };
    Detector.prototype.findFlatteningSubscriptions_ = function (snapshot, subscriptionRecord) {
        var flattenings = subscriptionRecord.flattenings, subscriptionSnapshot = subscriptionRecord.subscriptionSnapshot;
        snapshot.subscriptions.forEach(function (s) {
            if (s.rootSink === subscriptionSnapshot) {
                s.flattenings.forEach(function (f) {
                    var subscription = f.subscription;
                    if (!subscription.closed) {
                        flattenings.set(subscription, f);
                    }
                });
            }
        });
    };
    Detector.prototype.findRootSubscriptions_ = function (snapshot, rootSubscriptions) {
        var _this = this;
        snapshot.observables.forEach(function (observableSnapshot) {
            observableSnapshot.subscriptions.forEach(function (subscriptionSnapshot) {
                var complete = subscriptionSnapshot.complete, error = subscriptionSnapshot.error, sink = subscriptionSnapshot.sink, subscription = subscriptionSnapshot.subscription;
                if (!complete && !error && !sink && !subscription.closed) {
                    var subscriptionRecord = {
                        flattenings: new Map(),
                        subscriptionSnapshot: subscriptionSnapshot
                    };
                    _this.findFlatteningSubscriptions_(snapshot, subscriptionRecord);
                    rootSubscriptions.set(subscription, subscriptionRecord);
                }
            });
        });
    };
    Detector.prototype.record_ = function (snapshot) {
        var rootSubscriptions = new Map();
        this.findRootSubscriptions_(snapshot, rootSubscriptions);
        return { rootSubscriptions: rootSubscriptions, snapshot: snapshot };
    };
    return Detector;
}());
exports.Detector = Detector;
