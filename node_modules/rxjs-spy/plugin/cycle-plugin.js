"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("../logger");
var plugin_1 = require("./plugin");
var stack_trace_plugin_1 = require("./stack-trace-plugin");
var util_1 = require("../util");
var cycleDetectedSymbol = Symbol("cycleDetected");
var cycleWarnedSymbol = Symbol("cycleWarned");
var CyclePlugin = (function (_super) {
    __extends(CyclePlugin, _super);
    function CyclePlugin(spy, partialLogger) {
        var _this = _super.call(this, "cycle") || this;
        _this.nexts_ = [];
        _this.logger_ = logger_1.toLogger(partialLogger);
        _this.spy_ = spy;
        return _this;
    }
    CyclePlugin.prototype.afterNext = function (ref, value) {
        var nexts_ = this.nexts_;
        nexts_.pop();
    };
    CyclePlugin.prototype.beforeNext = function (ref, value) {
        var _a = this, logger_ = _a.logger_, nexts_ = _a.nexts_, spy_ = _a.spy_;
        var observable = ref.observable, subscription = ref.subscription;
        if (nexts_.indexOf(ref) !== -1) {
            if (!subscription[cycleDetectedSymbol]) {
                subscription[cycleDetectedSymbol] = true;
                if (nexts_.findIndex(function (n) { return n.subscription[cycleWarnedSymbol]; }) === -1) {
                    subscription[cycleWarnedSymbol] = true;
                    var stackFrames = stack_trace_plugin_1.getStackTrace(ref);
                    if (stackFrames.length === 0) {
                        spy_.warnOnce(console, "Stack tracing is not enabled; add the StackTracePlugin before the CyclePlugin.");
                    }
                    var stackTrace = stackFrames.length ? "; subscribed at\n" + stackFrames.join("\n") : "";
                    var type = util_1.inferType(observable);
                    logger_.warn("Cyclic next detected; type = " + type + "; value = " + value + stackTrace);
                }
            }
        }
        nexts_.push(ref);
    };
    return CyclePlugin;
}(plugin_1.BasePlugin));
exports.CyclePlugin = CyclePlugin;
