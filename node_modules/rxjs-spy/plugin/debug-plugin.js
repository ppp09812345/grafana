"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var match_1 = require("../match");
var plugin_1 = require("./plugin");
var DebugPlugin = (function (_super) {
    __extends(DebugPlugin, _super);
    function DebugPlugin(match, notifications) {
        var _this = _super.call(this, "debug(" + match_1.toString(match) + ")") || this;
        _this.notifications_ = notifications;
        _this.matcher_ = function (ref, notification) { return match_1.matches(ref, match) && (_this.notifications_.indexOf(notification) !== -1); };
        return _this;
    }
    DebugPlugin.prototype.beforeComplete = function (ref) {
        var matcher_ = this.matcher_;
        if (matcher_(ref, "complete")) {
            debugger;
        }
    };
    DebugPlugin.prototype.beforeError = function (ref, error) {
        var matcher_ = this.matcher_;
        if (matcher_(ref, "error")) {
            debugger;
        }
    };
    DebugPlugin.prototype.beforeNext = function (ref, value) {
        var matcher_ = this.matcher_;
        if (matcher_(ref, "next")) {
            debugger;
        }
    };
    DebugPlugin.prototype.beforeSubscribe = function (ref) {
        var matcher_ = this.matcher_;
        if (matcher_(ref, "subscribe")) {
            debugger;
        }
    };
    DebugPlugin.prototype.beforeUnsubscribe = function (ref) {
        var matcher_ = this.matcher_;
        if (matcher_(ref, "unsubscribe")) {
            debugger;
        }
    };
    return DebugPlugin;
}(plugin_1.BasePlugin));
exports.DebugPlugin = DebugPlugin;
