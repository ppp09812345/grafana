"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var circular_json_1 = require("circular-json");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var constants_1 = require("../devtools/constants");
var guards_1 = require("../devtools/guards");
var graph_plugin_1 = require("./graph-plugin");
var identify_1 = require("../identify");
var log_plugin_1 = require("./log-plugin");
var match_1 = require("../match");
var operators_2 = require("../operators");
var pause_plugin_1 = require("./pause-plugin");
var plugin_1 = require("./plugin");
var snapshot_plugin_1 = require("./snapshot-plugin");
var stack_trace_plugin_1 = require("./stack-trace-plugin");
var util_1 = require("../util");
var DevToolsPlugin = (function (_super) {
    __extends(DevToolsPlugin, _super);
    function DevToolsPlugin(spy) {
        var _this = _super.call(this, "devTools") || this;
        _this.batchQueue_ = [];
        _this.plugins_ = new Map();
        _this.snapshotHinted_ = false;
        _this.spy_ = spy;
        if ((typeof window !== "undefined") && window[constants_1.EXTENSION_KEY]) {
            var extension = window[constants_1.EXTENSION_KEY];
            _this.connection_ = extension.connect({ version: spy.version });
            _this.posts_ = new rxjs_1.Observable(function (observer) { return _this.connection_ ?
                _this.connection_.subscribe(function (post) { return observer.next(post); }) :
                function () { }; });
            _this.responses_ = _this.posts_.pipe(operators_1.filter(guards_1.isPostRequest), operators_1.map(function (request) {
                var response = {
                    messageType: constants_1.MESSAGE_RESPONSE,
                    request: request
                };
                switch (request.requestType) {
                    case "log":
                        _this.recordPlugin_(request["spyId"], request.postId, new log_plugin_1.LogPlugin(_this.spy_, request["spyId"]));
                        response["pluginId"] = request.postId;
                        break;
                    case "log-teardown":
                        _this.teardownPlugin_(request["pluginId"]);
                        break;
                    case "pause":
                        var plugin = new pause_plugin_1.PausePlugin(request["spyId"]);
                        _this.recordPlugin_(request["spyId"], request.postId, plugin);
                        plugin.deck.stats.pipe(operators_2.hide()).subscribe(function (stats) {
                            _this.batchDeckStats_(toStats(request["spyId"], stats));
                        });
                        response["pluginId"] = request.postId;
                        break;
                    case "pause-command":
                        var pluginRecord = _this.plugins_.get(request["pluginId"]);
                        if (pluginRecord) {
                            var deck = pluginRecord.plugin.deck;
                            switch (request["command"]) {
                                case "clear":
                                case "pause":
                                case "resume":
                                case "skip":
                                case "step":
                                    deck[request["command"]]();
                                    break;
                                case "inspect":
                                    response.error = "Not implemented.";
                                    break;
                                default:
                                    response.error = "Unexpected command.";
                                    break;
                            }
                        }
                        break;
                    case "pause-teardown":
                        _this.teardownPlugin_(request["pluginId"]);
                        break;
                    case "snapshot":
                        _this.snapshotHinted_ = false;
                        var snapshotPlugin = _this.spy_.find(snapshot_plugin_1.SnapshotPlugin);
                        if (snapshotPlugin) {
                            var snapshot = snapshotPlugin.snapshotAll();
                            response["snapshot"] = toSnapshot(snapshot);
                            return response;
                        }
                        response.error = "Cannot find snapshot plugin.";
                        break;
                    default:
                        response.error = "Unexpected request.";
                        break;
                }
                return response;
            }));
            _this.subscription_ = _this.responses_.pipe(operators_2.hide()).subscribe(function (response) {
                if (_this.connection_) {
                    _this.connection_.post(response);
                }
            });
        }
        return _this;
    }
    DevToolsPlugin.prototype.afterSubscribe = function (ref) {
        this.batchNotification_({
            notification: "subscribe",
            prefix: "after",
            ref: ref
        });
    };
    DevToolsPlugin.prototype.afterUnsubscribe = function (ref) {
        this.batchNotification_({
            notification: "unsubscribe",
            prefix: "after",
            ref: ref
        });
    };
    DevToolsPlugin.prototype.beforeComplete = function (ref) {
        this.batchNotification_({
            notification: "complete",
            prefix: "before",
            ref: ref
        });
    };
    DevToolsPlugin.prototype.beforeError = function (ref, error) {
        this.batchNotification_({
            error: error,
            notification: "error",
            prefix: "before",
            ref: ref
        });
    };
    DevToolsPlugin.prototype.beforeNext = function (ref, value) {
        this.batchNotification_({
            notification: "next",
            prefix: "before",
            ref: ref,
            value: value
        });
    };
    DevToolsPlugin.prototype.beforeSubscribe = function (ref) {
        this.batchNotification_({
            notification: "subscribe",
            prefix: "before",
            ref: ref
        });
    };
    DevToolsPlugin.prototype.beforeUnsubscribe = function (ref) {
        this.batchNotification_({
            notification: "unsubscribe",
            prefix: "before",
            ref: ref
        });
    };
    DevToolsPlugin.prototype.teardown = function () {
        if (this.batchTimeoutId_ !== undefined) {
            clearTimeout(this.batchTimeoutId_);
            this.batchTimeoutId_ = undefined;
        }
        if (this.connection_) {
            this.connection_.disconnect();
            this.connection_ = undefined;
            this.subscription_.unsubscribe();
        }
    };
    DevToolsPlugin.prototype.batchDeckStats_ = function (stats) {
        this.batchQueue_ = this.batchQueue_.filter(function (message) {
            return (message.broadcastType !== "deck-stats") ||
                (message.stats.id !== stats.id);
        });
        this.batchMessage_({
            broadcastType: "deck-stats",
            messageType: constants_1.MESSAGE_BROADCAST,
            stats: stats
        });
    };
    DevToolsPlugin.prototype.batchMessage_ = function (message) {
        var _this = this;
        if (this.batchTimeoutId_ !== undefined) {
            this.batchQueue_.push(message);
        }
        else {
            this.batchQueue_ = [message];
            this.batchTimeoutId_ = setTimeout(function () {
                var connection_ = _this.connection_;
                if (connection_) {
                    connection_.post({
                        messageType: constants_1.MESSAGE_BATCH,
                        messages: _this.batchQueue_
                    });
                    _this.batchTimeoutId_ = undefined;
                    _this.batchQueue_ = [];
                }
            }, constants_1.BATCH_MILLISECONDS);
        }
    };
    DevToolsPlugin.prototype.batchNotification_ = function (notificationRef) {
        var connection_ = this.connection_;
        if (connection_) {
            if (this.snapshotHinted_) {
                return;
            }
            var count = this.batchQueue_.reduce(function (c, message) { return (message.broadcastType === "notification") ? c + 1 : c; }, 0);
            if (count > constants_1.BATCH_NOTIFICATIONS) {
                this.batchQueue_ = this.batchQueue_.filter(function (message) { return message.broadcastType !== "notification"; });
                this.batchMessage_({
                    broadcastType: "snapshot-hint",
                    messageType: constants_1.MESSAGE_BROADCAST
                });
                this.snapshotHinted_ = true;
            }
            else {
                this.batchMessage_({
                    broadcastType: "notification",
                    messageType: constants_1.MESSAGE_BROADCAST,
                    notification: this.toNotification_(notificationRef)
                });
            }
        }
    };
    DevToolsPlugin.prototype.recordPlugin_ = function (spyId, pluginId, plugin) {
        var teardown = this.spy_.plug(plugin);
        this.plugins_.set(pluginId, { plugin: plugin, pluginId: pluginId, spyId: spyId, teardown: teardown });
    };
    DevToolsPlugin.prototype.teardownPlugin_ = function (pluginId) {
        var plugins_ = this.plugins_;
        var record = plugins_.get(pluginId);
        if (record) {
            record.teardown();
            plugins_.delete(pluginId);
        }
    };
    DevToolsPlugin.prototype.toNotification_ = function (notificationRef) {
        var error = notificationRef.error, notification = notificationRef.notification, prefix = notificationRef.prefix, ref = notificationRef.ref, value = notificationRef.value;
        var observable = ref.observable, subscriber = ref.subscriber;
        return {
            id: identify_1.identify({}),
            observable: {
                id: identify_1.identify(observable),
                path: util_1.inferPath(observable),
                tag: orNull(match_1.read(observable)),
                type: util_1.inferType(observable)
            },
            subscriber: {
                id: identify_1.identify(subscriber)
            },
            subscription: {
                error: error,
                graph: orNull(toGraph(ref)),
                id: identify_1.identify(ref),
                stackTrace: orNull(stack_trace_plugin_1.getStackTrace(ref))
            },
            tick: this.spy_.tick,
            timestamp: Date.now(),
            type: prefix + "-" + notification,
            value: (value === undefined) ? undefined : toValue(value)
        };
    };
    return DevToolsPlugin;
}(plugin_1.BasePlugin));
exports.DevToolsPlugin = DevToolsPlugin;
function orNull(value) {
    return (value === undefined) ? null : value;
}
function toGraph(subscriberRef) {
    var graphRef = graph_plugin_1.getGraphRef(subscriberRef);
    if (!graphRef) {
        return undefined;
    }
    var flattenings = graphRef.flattenings, flatteningsFlushed = graphRef.flatteningsFlushed, rootSink = graphRef.rootSink, sink = graphRef.sink, sources = graphRef.sources, sourcesFlushed = graphRef.sourcesFlushed;
    return {
        flattenings: flattenings.map(identify_1.identify),
        flatteningsFlushed: flatteningsFlushed,
        rootSink: rootSink ? identify_1.identify(rootSink) : null,
        sink: sink ? identify_1.identify(sink) : null,
        sources: sources.map(identify_1.identify),
        sourcesFlushed: sourcesFlushed
    };
}
function toSnapshot(snapshot) {
    return {
        observables: Array
            .from(snapshot.observables.values())
            .map(function (s) { return ({
            id: s.id,
            path: s.path,
            subscriptions: Array
                .from(s.subscriptions.values())
                .map(function (s) { return s.id; }),
            tag: orNull(s.tag),
            tick: s.tick,
            type: s.type
        }); }),
        subscribers: Array
            .from(snapshot.subscribers.values())
            .map(function (s) { return ({
            id: s.id,
            subscriptions: Array
                .from(s.subscriptions.values())
                .map(function (s) { return s.id; }),
            tick: s.tick,
            values: s.values.map(function (v) { return ({
                tick: v.tick,
                timestamp: v.timestamp,
                value: toValue(v.value)
            }); }),
            valuesFlushed: s.valuesFlushed
        }); }),
        subscriptions: Array
            .from(snapshot.subscriptions.values())
            .map(function (s) { return ({
            complete: s.complete,
            error: s.error,
            graph: {
                flattenings: Array
                    .from(s.flattenings.values())
                    .map(function (s) { return s.id; }),
                flatteningsFlushed: s.flatteningsFlushed,
                rootSink: s.rootSink ? identify_1.identify(s.rootSink) : null,
                sink: s.sink ? identify_1.identify(s.sink) : null,
                sources: Array
                    .from(s.sources.values())
                    .map(function (s) { return s.id; }),
                sourcesFlushed: s.sourcesFlushed
            },
            id: s.id,
            observable: identify_1.identify(s.observable),
            stackTrace: s.stackTrace,
            subscriber: identify_1.identify(s.subscriber),
            tick: s.tick,
            timestamp: s.timestamp,
            unsubscribed: s.unsubscribed
        }); }),
        tick: snapshot.tick
    };
}
function toStats(id, stats) {
    return __assign({ id: id }, stats);
}
function toValue(value) {
    return { json: circular_json_1.stringify(value, null, null, true) };
}
