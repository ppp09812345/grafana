"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("../logger");
var match_1 = require("../match");
var plugin_1 = require("./plugin");
var util_1 = require("../util");
var LogPlugin = (function (_super) {
    __extends(LogPlugin, _super);
    function LogPlugin(spy, tagMatch) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this, "log(" + match_1.toString(tagMatch) + ")") || this;
        _this.auditor_ = spy.auditor;
        _this.tagMatch_ = tagMatch;
        var defaultMatch = /.+/;
        switch (args.length) {
            case 0:
                _this.notificationMatch_ = defaultMatch;
                _this.logger_ = logger_1.toLogger(logger_1.defaultLogger);
                break;
            case 1:
                if (typeof args[0] === "function") {
                    _this.notificationMatch_ = args[0];
                    _this.logger_ = logger_1.toLogger(logger_1.defaultLogger);
                }
                else {
                    _this.notificationMatch_ = defaultMatch;
                    _this.logger_ = logger_1.toLogger(args[0]);
                }
                break;
            default:
                _this.notificationMatch_ = args[0];
                _this.logger_ = logger_1.toLogger(args[1]);
                break;
        }
        return _this;
    }
    LogPlugin.prototype.beforeComplete = function (ref) {
        this.log_(ref, "complete");
    };
    LogPlugin.prototype.beforeError = function (ref, error) {
        this.log_(ref, "error", error);
    };
    LogPlugin.prototype.beforeNext = function (ref, value) {
        this.log_(ref, "next", value);
    };
    LogPlugin.prototype.beforeSubscribe = function (ref) {
        this.log_(ref, "subscribe");
    };
    LogPlugin.prototype.beforeUnsubscribe = function (ref) {
        this.log_(ref, "unsubscribe");
    };
    LogPlugin.prototype.log_ = function (ref, notification, param) {
        var _this = this;
        var _a = this, auditor_ = _a.auditor_, notificationMatch_ = _a.notificationMatch_, tagMatch_ = _a.tagMatch_;
        if (match_1.matches(ref, tagMatch_) && match_1.matches(ref, notificationMatch_, notification)) {
            auditor_.audit(this, function (ignored) {
                var logger_ = _this.logger_;
                var observable = ref.observable, subscriber = ref.subscriber;
                var tag = match_1.read(observable);
                var type = util_1.inferType(observable);
                var matching = (typeof tagMatch_ === "string") ? "" : "; matching " + match_1.toString(tagMatch_);
                var audit = (ignored === 0) ? "" : "; ignored " + ignored;
                var description = tag ?
                    "Tag = " + tag + "; notification = " + notification + matching + audit :
                    "Type = " + type + "; notification = " + notification + matching + audit;
                switch (notification) {
                    case "error":
                        logger_.error(description + "; error =", param);
                        break;
                    case "next":
                        logger_.log(description + "; value =", param);
                        break;
                    default:
                        logger_.log(description);
                        break;
                }
            });
        }
    };
    return LogPlugin;
}(plugin_1.BasePlugin));
exports.LogPlugin = LogPlugin;
