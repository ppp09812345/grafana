import { Notification, Observable } from "rxjs";
import { PartialLogger } from "../logger";
import { Match } from "../match";
import { BasePlugin } from "./plugin";
import { Teardown } from "../spy-interface";
import { SubscriptionRef } from "../subscription-ref";
export interface DeckStats {
    notifications: number;
    paused: boolean;
}
export declare class Deck {
    teardown: Teardown | undefined;
    private match_;
    private paused_;
    private states_;
    private stats_;
    constructor(match: Match);
    readonly stats: Observable<DeckStats>;
    readonly paused: boolean;
    clear(predicate?: (notification: Notification<any>) => boolean): void;
    log(partialLogger?: PartialLogger): void;
    pause(): void;
    resume(): void;
    select(ref: SubscriptionRef): (source: Observable<any>) => Observable<any>;
    skip(): void;
    step(): void;
    unsubscribe(): void;
    private broadcast_;
}
export declare class PausePlugin extends BasePlugin {
    private match_;
    private deck_;
    constructor(match: Match);
    readonly deck: Deck;
    readonly match: Match;
    select(ref: SubscriptionRef): ((source: Observable<any>) => Observable<any>) | undefined;
    teardown(): void;
}
