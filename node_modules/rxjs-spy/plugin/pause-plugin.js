"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var logger_1 = require("../logger");
var match_1 = require("../match");
var operators_2 = require("../operators");
var plugin_1 = require("./plugin");
var Deck = (function () {
    function Deck(match) {
        this.paused_ = true;
        this.states_ = new Map();
        this.match_ = match;
        this.stats_ = new rxjs_1.Subject();
    }
    Object.defineProperty(Deck.prototype, "stats", {
        get: function () {
            return this.stats_.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Deck.prototype, "paused", {
        get: function () {
            return this.paused_;
        },
        enumerable: true,
        configurable: true
    });
    Deck.prototype.clear = function (predicate) {
        if (predicate === void 0) { predicate = function () { return true; }; }
        this.states_.forEach(function (state) {
            state.notifications_ = state.notifications_.filter(function (notification) { return !predicate(notification); });
        });
        this.broadcast_();
    };
    Deck.prototype.log = function (partialLogger) {
        if (partialLogger === void 0) { partialLogger = logger_1.defaultLogger; }
        var logger = logger_1.toLogger(partialLogger);
        logger.group("Deck matching " + match_1.toString(this.match_));
        logger.log("Paused =", this.paused_);
        this.states_.forEach(function (state) {
            logger.group("Observable; tag = " + state.tag_);
            logger.log("Notifications =", state.notifications_);
            logger.groupEnd();
        });
        logger.groupEnd();
    };
    Deck.prototype.pause = function () {
        this.paused_ = true;
        this.broadcast_();
    };
    Deck.prototype.resume = function () {
        this.states_.forEach(function (state) {
            while (state.notifications_.length > 0) {
                state.subject_.next(state.notifications_.shift());
            }
        });
        this.paused_ = false;
        this.broadcast_();
    };
    Deck.prototype.select = function (ref) {
        var _this = this;
        var observable = ref.observable;
        return function (source) {
            var state = _this.states_.get(observable);
            if (state) {
                state.subscription_.unsubscribe();
            }
            else {
                state = {
                    notifications_: [],
                    subject_: new rxjs_1.Subject(),
                    subscription_: undefined,
                    tag_: match_1.read(observable)
                };
                _this.states_.set(observable, state);
            }
            state.subscription_ = source.pipe(operators_1.materialize(), operators_2.hide()).subscribe({
                next: function (notification) {
                    if (_this.paused_) {
                        state.notifications_.push(notification);
                    }
                    else {
                        state.subject_.next(notification);
                    }
                    _this.broadcast_();
                }
            });
            _this.broadcast_();
            return state.subject_.asObservable().pipe(operators_1.dematerialize());
        };
    };
    Deck.prototype.skip = function () {
        this.states_.forEach(function (state) {
            if (state.notifications_.length > 0) {
                state.notifications_.shift();
            }
        });
        this.broadcast_();
    };
    Deck.prototype.step = function () {
        this.states_.forEach(function (state) {
            if (state.notifications_.length > 0) {
                state.subject_.next(state.notifications_.shift());
            }
        });
        this.broadcast_();
    };
    Deck.prototype.unsubscribe = function () {
        this.states_.forEach(function (state) {
            if (state.subscription_) {
                state.subscription_.unsubscribe();
                state.subscription_ = undefined;
            }
        });
        this.broadcast_();
    };
    Deck.prototype.broadcast_ = function () {
        var _a = this, paused_ = _a.paused_, states_ = _a.states_, stats_ = _a.stats_;
        var notifications = 0;
        states_.forEach(function (state) { return notifications += state.notifications_.length; });
        stats_.next({
            notifications: notifications,
            paused: paused_
        });
    };
    return Deck;
}());
exports.Deck = Deck;
var PausePlugin = (function (_super) {
    __extends(PausePlugin, _super);
    function PausePlugin(match) {
        var _this = _super.call(this, "pause(" + match_1.toString(match) + ")") || this;
        _this.deck_ = new Deck(match);
        _this.match_ = match;
        return _this;
    }
    Object.defineProperty(PausePlugin.prototype, "deck", {
        get: function () {
            var deck_ = this.deck_;
            return deck_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PausePlugin.prototype, "match", {
        get: function () {
            var match_ = this.match_;
            return match_;
        },
        enumerable: true,
        configurable: true
    });
    PausePlugin.prototype.select = function (ref) {
        var _a = this, deck_ = _a.deck_, match_ = _a.match_;
        if (match_1.matches(ref, match_)) {
            return deck_.select(ref);
        }
        return undefined;
    };
    PausePlugin.prototype.teardown = function () {
        var deck_ = this.deck_;
        if (deck_) {
            deck_.resume();
            deck_.unsubscribe();
        }
    };
    return PausePlugin;
}(plugin_1.BasePlugin));
exports.PausePlugin = PausePlugin;
