import { StackFrame } from "error-stack-parser";
import { Observable, Subscriber, Subscription } from "rxjs";
import { BasePlugin } from "./plugin";
import { Spy } from "../spy-interface";
import { SubscriberRef, SubscriptionRef } from "../subscription-ref";
export interface SnapshotRef {
    complete: boolean;
    error: any;
    tick: number;
    timestamp: number;
    unsubscribed: boolean;
    values: {
        tick: number;
        timestamp: number;
        value: any;
    }[];
    valuesFlushed: number;
}
export declare function getSnapshotRef(ref: SubscriberRef): SnapshotRef;
export interface Snapshot {
    observables: Map<Observable<any>, ObservableSnapshot>;
    subscribers: Map<Subscriber<any>, SubscriberSnapshot>;
    subscriptions: Map<Subscription, SubscriptionSnapshot>;
    tick: number;
    mapStackTraces(observableSnapshots: ObservableSnapshot[]): Observable<void>;
    mapStackTraces(subscriberSnapshots: SubscriberSnapshot[]): Observable<void>;
    mapStackTraces(subscriptionSnapshots: SubscriptionSnapshot[]): Observable<void>;
}
export interface ObservableSnapshot {
    id: string;
    observable: Observable<any>;
    path: string;
    subscriptions: Map<Subscription, SubscriptionSnapshot>;
    tag: string | undefined;
    tick: number;
    type: string;
}
export interface SubscriberSnapshot {
    id: string;
    subscriber: Subscriber<any>;
    subscriptions: Map<Subscription, SubscriptionSnapshot>;
    tick: number;
    values: {
        tick: number;
        timestamp: number;
        value: any;
    }[];
    valuesFlushed: number;
}
export interface SubscriptionSnapshot {
    complete: boolean;
    error: any;
    flattenings: Map<Subscription, SubscriptionSnapshot>;
    flatteningsFlushed: number;
    id: string;
    mappedStackTrace: Observable<StackFrame[]>;
    observable: Observable<any>;
    rootSink: SubscriptionSnapshot | undefined;
    sink: SubscriptionSnapshot | undefined;
    sources: Map<Subscription, SubscriptionSnapshot>;
    sourcesFlushed: number;
    stackTrace: StackFrame[];
    subscriber: Subscriber<any>;
    subscription: Subscription;
    tick: number;
    timestamp: number;
    unsubscribed: boolean;
}
export declare class SnapshotPlugin extends BasePlugin {
    private keptValues_;
    private sentinel_;
    private spy_;
    constructor(spy: Spy, { keptValues }?: {
        keptValues?: number;
    });
    afterUnsubscribe(ref: SubscriptionRef): void;
    beforeComplete(ref: SubscriptionRef): void;
    beforeError(ref: SubscriptionRef, error: any): void;
    beforeNext(ref: SubscriptionRef, value: any): void;
    beforeSubscribe(ref: SubscriberRef): void;
    snapshotAll({ since }?: {
        since?: Snapshot;
    }): Snapshot;
    snapshotObservable(ref: SubscriptionRef): ObservableSnapshot | undefined;
    snapshotSubscriber(ref: SubscriptionRef): SubscriberSnapshot | undefined;
    private addSubscriptionRefs_;
    private getSubscriptionRefs_;
}
