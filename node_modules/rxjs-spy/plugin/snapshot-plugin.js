"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var graph_plugin_1 = require("./graph-plugin");
var identify_1 = require("../identify");
var match_1 = require("../match");
var operators_2 = require("../operators");
var plugin_1 = require("./plugin");
var stack_trace_plugin_1 = require("./stack-trace-plugin");
var util_1 = require("../util");
var snapshotRefSymbol = Symbol("snapshotRef");
function getSnapshotRef(ref) {
    return ref[snapshotRefSymbol];
}
exports.getSnapshotRef = getSnapshotRef;
function mapStackTraces(snapshots) {
    var observables = [rxjs_1.of(null)];
    snapshots.forEach(function (snapshot) {
        if (snapshot.subscriptions) {
            snapshot.subscriptions.forEach(mapSubscriptionStackTraces);
        }
        else {
            mapSubscriptionStackTraces(snapshot);
        }
    });
    return rxjs_1.forkJoin(observables).pipe(operators_1.mapTo(undefined), operators_2.hide());
    function mapSubscriptionStackTraces(subscriptionSnapshot) {
        observables.push(subscriptionSnapshot.mappedStackTrace);
        if (subscriptionSnapshot.rootSink) {
            observables.push(subscriptionSnapshot.rootSink.mappedStackTrace);
        }
    }
}
function setSnapshotRef(ref, value) {
    ref[snapshotRefSymbol] = value;
    return value;
}
var SnapshotPlugin = (function (_super) {
    __extends(SnapshotPlugin, _super);
    function SnapshotPlugin(spy, _a) {
        var _b = (_a === void 0 ? {} : _a).keptValues, keptValues = _b === void 0 ? 4 : _b;
        var _this = _super.call(this, "snapshot") || this;
        _this.keptValues_ = keptValues;
        _this.sentinel_ = undefined;
        _this.spy_ = spy;
        return _this;
    }
    SnapshotPlugin.prototype.afterUnsubscribe = function (ref) {
        var snapshotRef = getSnapshotRef(ref);
        snapshotRef.tick = this.spy_.tick;
        snapshotRef.unsubscribed = true;
    };
    SnapshotPlugin.prototype.beforeComplete = function (ref) {
        var snapshotRef = getSnapshotRef(ref);
        snapshotRef.tick = this.spy_.tick;
        snapshotRef.complete = true;
    };
    SnapshotPlugin.prototype.beforeError = function (ref, error) {
        var snapshotRef = getSnapshotRef(ref);
        snapshotRef.tick = this.spy_.tick;
        snapshotRef.error = error;
    };
    SnapshotPlugin.prototype.beforeNext = function (ref, value) {
        var tick = this.spy_.tick;
        var snapshotRef = getSnapshotRef(ref);
        snapshotRef.tick = tick;
        snapshotRef.values.push({ tick: tick, timestamp: Date.now(), value: value });
        var keptValues_ = this.keptValues_;
        var count = snapshotRef.values.length - keptValues_;
        if (count > 0) {
            snapshotRef.values.splice(0, count);
            snapshotRef.valuesFlushed += count;
        }
    };
    SnapshotPlugin.prototype.beforeSubscribe = function (ref) {
        var snapshotRef = setSnapshotRef(ref, {
            complete: false,
            error: undefined,
            tick: this.spy_.tick,
            timestamp: Date.now(),
            unsubscribed: false,
            values: [],
            valuesFlushed: 0
        });
        var graphRef = graph_plugin_1.getGraphRef(ref);
        if (graphRef) {
            this.sentinel_ = graphRef.sentinel;
        }
        else {
            this.spy_.warnOnce(console, "Graphing is not enabled; add the GraphPlugin before the SnapshotPlugin.");
        }
    };
    SnapshotPlugin.prototype.snapshotAll = function (_a) {
        var since = (_a === void 0 ? {} : _a).since;
        var observables = new Map();
        var subscribers = new Map();
        var subscriptions = new Map();
        var subscriptionRefs = this.getSubscriptionRefs_();
        subscriptionRefs.forEach(function (unused, ref) {
            var _a;
            var observable = ref.observable, subscriber = ref.subscriber, subscription = ref.subscription;
            var graphRef = graph_plugin_1.getGraphRef(ref);
            var flatteningsFlushed = graphRef.flatteningsFlushed, sourcesFlushed = graphRef.sourcesFlushed;
            var snapshotRef = getSnapshotRef(ref);
            var complete = snapshotRef.complete, error = snapshotRef.error, tick = snapshotRef.tick, timestamp = snapshotRef.timestamp, unsubscribed = snapshotRef.unsubscribed, values = snapshotRef.values, valuesFlushed = snapshotRef.valuesFlushed;
            var subscriptionSnapshot = {
                complete: complete,
                error: error,
                flattenings: new Map(),
                flatteningsFlushed: flatteningsFlushed,
                id: identify_1.identify(ref),
                mappedStackTrace: stack_trace_plugin_1.getMappedStackTrace(ref),
                observable: observable,
                rootSink: undefined,
                sink: undefined,
                sources: new Map(),
                sourcesFlushed: sourcesFlushed,
                stackTrace: stack_trace_plugin_1.getStackTrace(ref),
                subscriber: subscriber,
                subscription: subscription,
                tick: tick,
                timestamp: timestamp,
                unsubscribed: unsubscribed
            };
            subscriptions.set(subscription, subscriptionSnapshot);
            var subscriberSnapshot = subscribers.get(subscriber);
            if (!subscriberSnapshot) {
                subscriberSnapshot = {
                    id: identify_1.identify(subscriber),
                    subscriber: subscriber,
                    subscriptions: new Map(),
                    tick: tick,
                    values: [],
                    valuesFlushed: 0
                };
                subscribers.set(subscriber, subscriberSnapshot);
            }
            subscriberSnapshot.subscriptions.set(subscription, subscriptionSnapshot);
            subscriberSnapshot.tick = Math.max(subscriberSnapshot.tick, tick);
            (_a = subscriberSnapshot.values).push.apply(_a, values);
            subscriberSnapshot.valuesFlushed += valuesFlushed;
            var observableSnapshot = observables.get(observable);
            if (!observableSnapshot) {
                observableSnapshot = {
                    id: identify_1.identify(observable),
                    observable: observable,
                    path: util_1.inferPath(observable),
                    subscriptions: new Map(),
                    tag: match_1.read(observable),
                    tick: tick,
                    type: util_1.inferType(observable)
                };
                observables.set(observable, observableSnapshot);
            }
            observableSnapshot.subscriptions.set(subscription, subscriptionSnapshot);
            observableSnapshot.tick = Math.max(observableSnapshot.tick, tick);
        });
        subscriptionRefs.forEach(function (unused, ref) {
            var graphRef = graph_plugin_1.getGraphRef(ref);
            var subscriptionSnapshot = subscriptions.get(ref.subscription);
            if (graphRef.sink) {
                subscriptionSnapshot.sink = subscriptions.get(graphRef.sink.subscription);
            }
            if (graphRef.rootSink) {
                subscriptionSnapshot.rootSink = subscriptions.get(graphRef.rootSink.subscription);
            }
            graphRef.flattenings.forEach(function (m) { return subscriptionSnapshot.flattenings.set(m.subscription, subscriptions.get(m.subscription)); });
            graphRef.sources.forEach(function (s) { return subscriptionSnapshot.sources.set(s.subscription, subscriptions.get(s.subscription)); });
        });
        subscribers.forEach(function (subscriberSnapshot) {
            subscriberSnapshot.values.sort(function (a, b) { return a.tick - b.tick; });
        });
        if (since !== undefined) {
            observables.forEach(function (value, key) {
                if (value.tick <= since.tick) {
                    observables.delete(key);
                }
            });
            subscribers.forEach(function (value, key) {
                if (value.tick <= since.tick) {
                    subscribers.delete(key);
                }
            });
            subscriptions.forEach(function (value, key) {
                if (value.tick <= since.tick) {
                    subscriptions.delete(key);
                }
            });
        }
        return {
            mapStackTraces: mapStackTraces,
            observables: observables,
            subscribers: subscribers,
            subscriptions: subscriptions,
            tick: this.spy_.tick
        };
    };
    SnapshotPlugin.prototype.snapshotObservable = function (ref) {
        var snapshot = this.snapshotAll();
        return snapshot.observables.get(ref.observable);
    };
    SnapshotPlugin.prototype.snapshotSubscriber = function (ref) {
        var snapshot = this.snapshotAll();
        return snapshot.subscribers.get(ref.subscriber);
    };
    SnapshotPlugin.prototype.addSubscriptionRefs_ = function (ref, map) {
        var _this = this;
        map.set(ref, true);
        var graphRef = graph_plugin_1.getGraphRef(ref);
        graphRef.flattenings.forEach(function (m) { return _this.addSubscriptionRefs_(m, map); });
        graphRef.sources.forEach(function (s) { return _this.addSubscriptionRefs_(s, map); });
    };
    SnapshotPlugin.prototype.getSubscriptionRefs_ = function () {
        var _this = this;
        var sentinel_ = this.sentinel_;
        var map = new Map();
        if (sentinel_) {
            sentinel_.sources.forEach(function (ref) { return _this.addSubscriptionRefs_(ref, map); });
        }
        return map;
    };
    return SnapshotPlugin;
}(plugin_1.BasePlugin));
exports.SnapshotPlugin = SnapshotPlugin;
