"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var error_stack_parser_1 = require("error-stack-parser");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var StackTraceGps = require("stacktrace-gps");
var operators_2 = require("../operators");
var plugin_1 = require("./plugin");
var stackTraceRefSymbol = Symbol("stackTraceRef");
function getMappedStackTrace(ref) {
    var stackTraceRef = getStackTraceRef(ref);
    return stackTraceRef ? stackTraceRef.mappedStackTrace : rxjs_1.of([]);
}
exports.getMappedStackTrace = getMappedStackTrace;
function getStackTrace(ref) {
    var stackTraceRef = getStackTraceRef(ref);
    return stackTraceRef ? stackTraceRef.stackTrace : [];
}
exports.getStackTrace = getStackTrace;
function getStackTraceRef(ref) {
    return ref[stackTraceRefSymbol];
}
exports.getStackTraceRef = getStackTraceRef;
function setStackTraceRef(ref, value) {
    ref[stackTraceRefSymbol] = value;
    return value;
}
var StackTracePlugin = (function (_super) {
    __extends(StackTracePlugin, _super);
    function StackTracePlugin(_a) {
        var _b = (_a === void 0 ? {} : _a).sourceMaps, sourceMaps = _b === void 0 ? false : _b;
        var _this = _super.call(this, "stackTrace") || this;
        _this.sourceCache_ = {};
        _this.sourceMaps_ = sourceMaps;
        return _this;
    }
    StackTracePlugin.prototype.beforeSubscribe = function (ref) {
        var _this = this;
        var stackFrames = this.getStackFrames_();
        if (this.sourceMaps_ && (typeof window !== "undefined") && (window.location.protocol !== "file:")) {
            setStackTraceRef(ref, {
                mappedStackTrace: rxjs_1.defer(function () {
                    var gps = new StackTraceGps({ sourceCache: _this.sourceCache_ });
                    return Promise.all(stackFrames.map(function (stackFrame) { return gps
                        .pinpoint(stackFrame)
                        .catch(function () { return stackFrame; }); }));
                }).pipe(operators_1.shareReplay(1), operators_2.hide()),
                stackTrace: stackFrames
            });
        }
        else {
            setStackTraceRef(ref, {
                mappedStackTrace: rxjs_1.of(stackFrames).pipe(operators_2.hide()),
                stackTrace: stackFrames
            });
        }
    };
    StackTracePlugin.prototype.teardown = function () {
        this.sourceCache_ = {};
    };
    StackTracePlugin.prototype.getStackFrames_ = function () {
        try {
            throw new Error();
        }
        catch (error) {
            var core_1 = true;
            return error_stack_parser_1.parse(error).filter(function (stackFrame) {
                var result = !core_1;
                if (/coreSubscribe_/.test(stackFrame.functionName || "")) {
                    core_1 = false;
                }
                return result;
            });
        }
    };
    return StackTracePlugin;
}(plugin_1.BasePlugin));
exports.StackTracePlugin = StackTracePlugin;
