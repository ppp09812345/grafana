"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graph_plugin_1 = require("./graph-plugin");
var plugin_1 = require("./plugin");
var StatsPlugin = (function (_super) {
    __extends(StatsPlugin, _super);
    function StatsPlugin(spy) {
        var _this = _super.call(this, "stats") || this;
        _this.spy_ = spy;
        _this.stats_ = {
            completes: 0,
            errors: 0,
            flattenedSubscribes: 0,
            leafSubscribes: 0,
            maxDepth: 0,
            nexts: 0,
            rootSubscribes: 0,
            subscribes: 0,
            tick: 0,
            timespan: 0,
            totalDepth: 0,
            unsubscribes: 0
        };
        _this.time_ = 0;
        return _this;
    }
    StatsPlugin.prototype.afterSubscribe = function (ref) {
        var stats_ = this.stats_;
        var graphRef = graph_plugin_1.getGraphRef(ref);
        if (graphRef) {
            var depth = graphRef.depth, flattened = graphRef.flattened, flattenings = graphRef.flattenings, flatteningsFlushed = graphRef.flatteningsFlushed, rootSink = graphRef.rootSink, sources = graphRef.sources, sourcesFlushed = graphRef.sourcesFlushed;
            if (!rootSink) {
                stats_.rootSubscribes += 1;
            }
            if (flattened) {
                stats_.flattenedSubscribes += 1;
            }
            if ((flattenings.length + flatteningsFlushed + sources.length + sourcesFlushed) === 0) {
                if (stats_.maxDepth < depth) {
                    stats_.maxDepth = depth;
                }
                stats_.leafSubscribes += 1;
                stats_.totalDepth += depth;
            }
        }
    };
    StatsPlugin.prototype.beforeComplete = function (ref) {
        var stats_ = this.stats_;
        ++stats_.completes;
        this.all_();
    };
    StatsPlugin.prototype.beforeError = function (ref, error) {
        var stats_ = this.stats_;
        ++stats_.errors;
        this.all_();
    };
    StatsPlugin.prototype.beforeNext = function (ref, value) {
        var stats_ = this.stats_;
        ++stats_.nexts;
        this.all_();
    };
    StatsPlugin.prototype.beforeSubscribe = function (ref) {
        var stats_ = this.stats_;
        ++stats_.subscribes;
        this.all_();
    };
    StatsPlugin.prototype.beforeUnsubscribe = function (ref) {
        var stats_ = this.stats_;
        ++stats_.unsubscribes;
        this.all_();
    };
    Object.defineProperty(StatsPlugin.prototype, "stats", {
        get: function () {
            var stats_ = this.stats_;
            return __assign({}, stats_);
        },
        enumerable: true,
        configurable: true
    });
    StatsPlugin.prototype.all_ = function () {
        var _a = this, spy_ = _a.spy_, stats_ = _a.stats_, time_ = _a.time_;
        if (time_ === 0) {
            this.time_ = Date.now();
        }
        else {
            stats_.timespan = Date.now() - time_;
        }
        stats_.tick = spy_.tick;
    };
    return StatsPlugin;
}(plugin_1.BasePlugin));
exports.StatsPlugin = StatsPlugin;
