"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var detect_1 = require("./detect");
var logger_1 = require("./logger");
var plugin_1 = require("./plugin");
var util_1 = require("./util");
function wrap(core, deprecation) {
    if (deprecation === void 0) { deprecation = function () { }; }
    return {
        deck: function (call) {
            deprecation();
            var pausePlugins = core.findAll(plugin_1.PausePlugin);
            if (call === undefined) {
                var logger_2 = logger_1.toLogger(logger_1.defaultLogger);
                logger_2.group(pausePlugins.length + " Deck(s)");
                pausePlugins.forEach(function (pausePlugin, index) { return logger_2.log(index + 1 + " pause(" + pausePlugin.name + ")"); });
                logger_2.groupEnd();
            }
            else {
                var pausePlugin = pausePlugins[call - 1];
                return pausePlugin ? pausePlugin.deck : undefined;
            }
        },
        debug: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            core.debug.apply(core, args);
        },
        detect: function (id) {
            if (id === void 0) { id = ""; }
            deprecation();
            detect_1.detect(id);
        },
        flush: function () {
            deprecation();
            core.flush();
        },
        inferPath: util_1.inferPath,
        inferType: util_1.inferType,
        let: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            core.let.apply(core, args);
        },
        log: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            core.log.apply(core, args);
        },
        maxLogged: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            core.maxLogged.apply(core, args);
        },
        pause: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            return core.pause.apply(core, args);
        },
        query: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            core.query.apply(core, args);
        },
        show: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            deprecation();
            core.show.apply(core, args);
        },
        stats: function () {
            deprecation();
            core.stats();
        },
        undo: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (args.length === 0) {
                var logger_3 = logger_1.toLogger(logger_1.defaultLogger);
                logger_3.group(core.undos.length + " undo(s)");
                core.undos.forEach(function (undo, index) { return logger_3.log(index + 1 + " " + undo.name); });
                logger_3.groupEnd();
            }
            else {
                args
                    .map(function (at) { return core.undos[at - 1]; })
                    .filter(Boolean)
                    .forEach(function (undo) { return core.unplug(undo); });
            }
        }
    };
}
exports.wrap = wrap;
