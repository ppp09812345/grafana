"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
function inferPath(observable) {
    var source = observable.source;
    if (source) {
        return inferPath(source) + "/" + inferType(observable);
    }
    return "/" + inferType(observable);
}
exports.inferPath = inferPath;
function inferType(observable) {
    var operator = observable.operator;
    var prototype = Object.getPrototypeOf(operator ? operator : observable);
    if (prototype.constructor && prototype.constructor.name) {
        var name_1 = prototype.constructor.name;
        name_1 = "" + name_1.charAt(0).toLowerCase() + name_1.substring(1);
        return name_1.replace(/^(\w+)(Observable|Operator)$/, function (match, p) { return p; });
    }
    return "unknown";
}
exports.inferType = inferType;
function isObservable(arg) {
    return arg && arg.subscribe;
}
exports.isObservable = isObservable;
var empty = {
    closed: true,
    error: function (error) { throw error; },
    next: function (value) { },
    complete: function () { }
};
var SubscriberSymbol = Symbol.for("rxSubscriber");
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof rxjs_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[SubscriberSymbol]) {
            return nextOrObserver[SubscriberSymbol]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new rxjs_1.Subscriber(empty);
    }
    return new rxjs_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
